x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.0}
  build:
      context: ./docker/Airflow
      dockerfile: Dockerfile.airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    # AIRFLOW__API_AUTH__JWT_SECRET: someverylongrandomstring
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CELERY__DEFAULT_QUEUE: default # ← add
    AIRFLOW__LOGGING__WORKER_LOG_SERVER_HOST: airflow-worker   # ← add
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  profiles: ["airflow"] 
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  networks:
      - sipay-net
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
services:
  postgres:
    image: postgres:15-alpine
    profiles: ["airflow"]
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - sipay-net
  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    profiles: ["airflow"]
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - sipay-net
  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 60s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      # airflow-apiserver:
        # condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /opts/airflow/{logs,dags,plugins,config}
        chown -R "${AIRFLOW_UID}:0" /opts/airflow/{logs,dags,plugins,config}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

  dwh_init:
    profiles: ["dwh"]
    build:
      context: ./docker/Python
      dockerfile: Dockerfile.python
    volumes:
      - ./init/dwh_init/dataset.csv:/app/dataset.csv
      - ./init/dwh_init/load_csv_to_postgres.py:/app/load_csv_to_postgres.py
    entrypoint: ["python", "/app/load_csv_to_postgres.py"]
    depends_on:
      dwh:
        condition: service_healthy
    networks:
      - sipay-net
  dwh:
    image: postgres:15-alpine
    profiles: ["dwh"]
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: sipay
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "sipay"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - dwh_data:/var/lib/postgresql/data
      - ./init/dwh:/docker-entrypoint-initdb.d
    networks:
      sipay-net:
  pgadmin:
    image: dpage/pgadmin4:9.2.0
    profiles: ["dwh"]
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./init/pgadmin4/servers.json:/pgadmin4/servers.json
    networks:
      sipay-net:
  spark-master:
    profiles: ["iceberg"]
    build:
      context: ./docker/Spark
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_NO_DAEMONIZE=true   
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - SPARK_LOCAL_IP=spark-master  
    depends_on:
    - hive-metastore 
    command: org.apache.spark.deploy.master.Master
    entrypoint: /opt/spark/bin/spark-class
    ports:
      - "8081:8080"  # Spark master UI
      #- "7077:7077"   Spark Cluster master port.
    networks:
      - sipay-net
    volumes:
      - ./warehouse:/home/iceberg/warehouse
      - ./scripts:/opt/spark/scripts
      - ./init/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf

  # spark-worker-1:
  #   container_name: spark-worker-1
  #   build:
  #     context: ./docker/Spark
  #     dockerfile: Dockerfile.spark
  #   profiles: ["iceberg"]
  #   environment:
  #     - SPARK_NO_DAEMONIZE=true 
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER=spark://spark-master:7077
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #     - SPARK_WORKER_MEMORY=2g     
  #     - SPARK_WORKER_CORES=1
  #   entrypoint: /opt/spark/bin/spark-class
  #   command: org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - sipay-net
  #   volumes:
  #     - ./warehouse:/home/iceberg/warehouse
  #     - ./scripts:/opt/spark/scripts
  #     - ./init/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  # spark-worker-2:
  #   build:
  #     context: ./docker/Spark
  #     dockerfile: Dockerfile.spark
  #   container_name: spark-worker-2
  #   profiles: ["iceberg"]
  #   environment:
  #     - SPARK_NO_DAEMONIZE=true 
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=2g     
  #     - SPARK_WORKER_CORES=1
  #     - AWS_ACCESS_KEY_ID=admin
  #     - AWS_SECRET_ACCESS_KEY=password
  #     - AWS_REGION=us-east-1
  #   entrypoint: /opt/spark/bin/spark-class
  #   command: org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - sipay-net
  #   volumes:
  #     - ./warehouse:/home/iceberg/warehouse
  #     - ./scripts:/opt/spark/scripts
  #     - ./init/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf

  hive-metastore:
    profiles: ["iceberg"]
    build:
      context: ./docker/Hive
      dockerfile: Dockerfile.hive
    environment:
      - HIVE_HOME=/opt/hive
      - HADOOP_HOME=/opt/hadoop
      - SERVICE_NAME=metastore
      - HIVE_METASTORE_USER=hive
      - HIVE_METASTORE_PASSWORD=hive
      # - HIVE_METASTORE_DB_TYPE=postgres
      # - HIVE_METASTORE_JDBC_URL=jdbc:postgresql://metastore-db:5432/metastore
    ports:
      - "9083:9083"
    entrypoint: >
      /bin/bash -c "
      /opt/hive/bin/schematool -dbType postgres -initSchema --verbose &&
      /opt/hive/bin/hive --service metastore
      "
    networks:
      - sipay-net
    depends_on:
      - metastore-db
    volumes:
      - ./init/hive:/opt/hive/init
      - ./init/hive/hive-site.xml:/opt/hive/conf/hive-site.xml

  metastore-db:
    profiles: ["iceberg"]
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    ports:
      - "5434:5432"
    networks:
      - sipay-net
    volumes:
      - hive_metastore_db:/var/lib/postgresql/data 
  minio:
    profiles: ["iceberg"]
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      sipay-net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    profiles: ["iceberg"]
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      sipay-net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
  trino:
    profiles: ["iceberg"]
    image: trinodb/trino:latest
    ports:
      - "8082:8080"
    networks:
      - sipay-net
    volumes:
      - ./init/trino/etc:/etc/trino
    depends_on:
      - hive-metastore
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password

volumes:
  pgadmin_data:
  dwh_data:
  hive_metastore_db:
  postgres-db-volume:
  
  
networks:
  sipay-net:
    driver: bridge